#!/usr/bin/env python

import commands
import pytcos.tcos as tcos
import subprocess


u = tcos.Util()
s = tcos.System()
l = tcos.Ldap()

mac = s.getMac()
ldap_url = s.getLdapUrl()
client_dn = l.getClientDn(mac, ldap_url)
devices_dn = l.getDevicesDn(client_dn, ldap_url)
locations_dn = l.getLocationsDn(client_dn, ldap_url)
locations_entry = l.getNismapentry(locations_dn, ldap_url)

hostname = l.getCnByDn(client_dn)
ip_eth0 = commands.getoutput("LANG=C ifconfig eth0 2>/dev/null | sed -n 's/.*inet addr:\\([0-9.]\\+\\).*/\\1/p'")


# functions
def writeSyslog_ng(filename="/etc/syslog-ng/syslog-ng.conf"):
    logserver = s.getNfsrootServer()

    f = open(filename, "w")
    f.write("@version: 3.3\n" +
            "source s_all {\n" +
            "\tinternal();\n" +
            '\tunix-stream("/dev/log");\n' +
            '\tfile("/proc/kmsg" program_override("kernel: "));\n' +
            "};\n\n" +
            "destination remote {\n" +
            '\tudp("' + logserver + '" template("<$PRI>$DATE ' + mac + ' $MSG"));\n' +
            "};\n\n" +
            "log {" +
            "\tsource(s_all);\n" +
            "\tdestination(remote);\n" +
            "};")
    f.close()


def startSyslog_ng():
    try:
        subprocess.call("update-rc.d -f syslog-ng start 14 2 . stop 90 0 1 6 .", shell=True)
    except:
        print("Couldn't start syslog-ng")


def write_timezones(destination="/etc/localtime"):
    localtime = locations_entry.get("Time.localtime", "posix/Etc/GMT")
    source = "/usr/share/zoneinfo/" + localtime

    u.symlinkSave(source, destination)
    # update /etc/timezone
    with open("/etc/timezone", 'w') as fobj:
        # strip strange 'posix' value:
        fobj.write(localtime.strip('posix/') + '\n')


def writeEnvironment(filename="/etc/environment"):
    path = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin/X11"
    lang = locations_entry.get("Lang.lang", "en_US.UTF-8")
    language = lang.split(".",1)[0]

    entry_dict = {
                  "export LANG" : lang,
                      "export PATH" : path,
                  "export LANGUAGE" : language,
                      }

    u.writeDictionaryToFile(entry_dict, filename)


def write_ntpd_conf(filename="/etc/ntp.conf"):
    boiler = \
"""
driftfile /tmp/ntp.drift
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
restrict -4 default kod notrap nomodify nopeer noquery
restrict -6 default kod notrap nomodify nopeer noquery
restrict 127.0.0.1

"""
    ntpservers = locations_entry.get("Time.ntpservers", "pool.ntp.org").split() # get a list of ntpservers
    # build the custom server line
    appendix = ""
    for server in ntpservers:
            appendix += ' '.join(['server', server, '\n'])
    with open(filename, 'w') as fobj:
            fobj.write(boiler + appendix)

def writeKeyboard(filename="/etc/default/keyboard"):
    types = []
    for device in devices_dn:
            types.append(l.getGroupOfUniqueNamesInfo(device, ldap_url)["schema"])

    if "keyboard" in types:
        device = devices_dn[types.index('keyboard')]
        xkbmodel = l.getNismapentry(device, ldap_url).get("xkbmodel", "pc105")
        xkblayout = l.getNismapentry(device, ldap_url).get("xkblayout", "de")
        xkbvariant = l.getNismapentry(device, ldap_url).get("xkbvariant", "")

        entry_dict = {"XKBMODEL"  : xkbmodel,
                            "XKBLAYOUT" : xkblayout}
        if xkbvariant:
            entry_dict['XKBVARIANT'] = xkbvariant
        else:
            entry_dict['XKBVARIANT'] = ""

        u.writeDictionaryToFile(entry_dict, filename)
        # Notify Udev for changes
        try:
            subprocess.check_call(['udevadm', 'trigger', '--subsystem-match=input', '--action=change'])
        except:
            print "Couldn't trigger udevadm"


def write_hostname(filename="/etc/hostname"):
    with open(filename) as f:
        etc_hostname = f.readline().strip('\n')
    # 'openthinclient' is provided by an applied config, hostname is set in
    # the manager console
    if etc_hostname == 'openthinclient' and len(hostname) != 0:
        with open(filename, 'w') as f:
            f.write(hostname + '\n')
            f.close()


def update_dns(hostname, filename="/etc/hostname"):
    with open(filename) as f:
        etc_hostname = f.readline().strip('\n')
    try:
        subprocess.check_call(['/busybox/sbin/udhcpc', '-o', '-F', etc_hostname])
    except:
        print "Couldn't update DNS (udhcpc)"

# main
if __name__ == "__main__":
    writeSyslog_ng("/etc/syslog-ng/syslog-ng.conf")
    # start syslog as early as possible
    startSyslog_ng()
    write_timezones()
    writeEnvironment("/etc/environment")
    write_ntpd_conf()
    writeKeyboard()
    write_hostname()
    update_dns(hostname)
