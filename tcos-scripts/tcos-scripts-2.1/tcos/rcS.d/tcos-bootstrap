#!/usr/bin/env python

import commands
import subprocess
import os
import time

import pytcos.tcos as tcos

u = tcos.Util()
s = tcos.System()
l = tcos.Ldap()

try:
    mac = s.getMac(iface=os.getenv('TCOS_NIC'))
except:
    mac = s.getMac()
 
ldap_url = s.getLdapUrl()
client_dn = l.getClientDn(mac, ldap_url)
devices_dn = l.getDevicesDn(client_dn, ldap_url)
locations_dn = l.getLocationsDn(client_dn, ldap_url)
locations_entry = l.getNismapentry(locations_dn, ldap_url)

hostname = l.getCnByDn(client_dn)
#ip_eth0 = commands.getoutput("LANG=C ifconfig eth0 2>/dev/null | sed -n 's/.*inet addr:\\([0-9.]\\+\\).*/\\1/p'")


# functions
def writeSyslog_ng(filename="/etc/syslog-ng/syslog-ng.conf"):
    logserver = s.getNfsrootServer()
    f = open(filename, "w")
    f.write("@version: 3.3\n" +
            "source s_all {\n" +
            "\tinternal();\n" +
            '\tunix-stream("/dev/log");\n' +
            '\tfile("/proc/kmsg" program_override("kernel: "));\n' +
            "};\n\n" +
            "destination remote {\n" +
            '\tudp("' + logserver + '" template("<$PRI>$DATE ' + mac + ' $MSG"));\n' +
            "};\n\n" +
            "log {" +
            "\tsource(s_all);\n" +
            "\tdestination(remote);\n" +
            "};")
    f.close()


def startSyslog_ng():
    # subprocess.call("update-rc.d -f syslog-ng start 14 2 . stop 90 0 1 6 .", shell=True)

    # Start logger here, whatever the system does think about.
    subprocess.call('find /etc/rc*.d/ -iname "*syslog-ng" -exec rm -f {} \;', shell=True)
    try:
        subprocess.call('rm -f /var/lib/syslog-ng/*; /etc/init.d/syslog-ng start', shell=True)
    except:
        print("Couldn't start syslog-ng")


def write_timezones(destination="/etc/localtime"):
    localtime = locations_entry.get("Time.localtime", "posix/Etc/GMT")
    source = "/usr/share/zoneinfo/" + localtime

    u.symlinkSave(source, destination)
    # update /etc/timezone
    with open("/etc/timezone", 'w') as fobj:
        # strip strange 'posix' value:
        fobj.write(localtime.strip('posix/') + '\n')


def writeEnvironment(filename="/etc/environment"):
    # keep in mind:
       # /etc/environment is already modified in Initrd/init
       # we need to append

    path = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin/X11"
    lang = locations_entry.get("Lang.lang", "en_US.UTF-8")
    language = lang.split(".",1)[0]

    f = open(filename, "a")
    f.write('###### following modifications are made by tcos-bootstrap ######\n')
    f.write('export LANG=' + lang + '\n')
    f.write('export PATH=' + path + '\n')
    f.write('export LANGUAGE=' + language + '\n')

    #    entry_dict = {
    #                  "export LANG" : lang,
    #                      "export PATH" : path,
    #                  "export LANGUAGE" : language,
    #                      }
    #    u.writeDictionaryToFile(entry_dict, filename)


def write_ntpd_conf(filename="/etc/ntp.conf"):
    boiler = \
"""
driftfile /tmp/ntp.drift
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
restrict -4 default kod notrap nomodify nopeer noquery
restrict -6 default kod notrap nomodify nopeer noquery
restrict 127.0.0.1

"""

#    We accept ntp-servers in two ways:
#       - via environment variable udhcpc_ntpsrv (given by /etc/environment and set by Initrd/init)
#       - via otc-manager, property of "location"

    if  os.getenv('udhcpc_ntpsrv', 0) != 0 :
        udhcpc_ntpsrv = os.getenv('udhcpc_ntpsrv').split()
    else :
        udhcpc_ntpsrv = []
    location_ntpsrv = locations_entry.get("Time.ntpservers", "pool.ntp.org").split()
    ntpservers = udhcpc_ntpsrv + location_ntpsrv

    # build the custom server line
    appendix = ""
    for server in ntpservers:
            appendix += ' '.join(['server', server, '\n'])
    with open(filename, 'w') as fobj:
            fobj.write(boiler + appendix)

def writeKeyboard(filename="/etc/default/keyboard"):
    types = []
    for device in devices_dn:
            types.append(l.getGroupOfUniqueNamesInfo(device, ldap_url)["schema"])

    if "keyboard" in types:
        device = devices_dn[types.index('keyboard')]
        xkbmodel = l.getNismapentry(device, ldap_url).get("xkbmodel", "pc105")
        xkblayout = l.getNismapentry(device, ldap_url).get("xkblayout", "de")
        xkbvariant = l.getNismapentry(device, ldap_url).get("xkbvariant", "")

        entry_dict = {"XKBMODEL"  : xkbmodel,
                            "XKBLAYOUT" : xkblayout}
        if xkbvariant:
            entry_dict['XKBVARIANT'] = xkbvariant
        else:
            entry_dict['XKBVARIANT'] = ""

        u.writeDictionaryToFile(entry_dict, filename)
        # Notify Udev for changes
        try:
            subprocess.check_call(['udevadm', 'trigger', '--subsystem-match=input', '--action=change'])
        except:
            print "Couldn't trigger udevadm"


def write_hostname(filename="/etc/hostname"):
    with open(filename) as f:
        etc_hostname = f.readline().strip('\n')
    # The way, the clients hostname comes in place.
         # 1) The default hostname 'openthinclient' is provided by an applied config inside the os-core Makefile.
         # 2) If the client receives an name while running Initrd/init, the hostname will be updated.
         # 3) If NOT, the clients name will be set here - to the name given in otc-manager.
    if etc_hostname == 'openthinclient' and len(hostname) != 0:
        with open(filename, 'w') as f:
            f.write(hostname + '\n')
            f.close()


def update_dns(hostname, filename="/etc/hostname"):
    with open(filename) as f:
        the_sytems_hostname = f.readline().strip('\n')

    if  os.getenv('TCOS_NIC', 0) != 0 :
        tcos_nic = os.getenv('TCOS_NIC')
    else :
        tcos_nic = "eth0"
    try:
        # Just try to push the hostname to the Nameserver. Do nothing more!
        os.system('udhcpc -n -q -i ' + tcos_nic + ' -s /bin/true -F ' + the_sytems_hostname + ' &>/dev/null')
    except:
        #subprocess.call('/bin/bash')
        print "Couldn't update DNS (udhcpc)"

def change_session_type():
    user_dn = l.getUserDn('tcos', ldap_url)
    apps_dn_list = l.getAppsDn(client_dn, user_dn, ldap_url)
    for app_dn in apps_dn_list:
       unique_name = l.getGroupOfUniqueNamesInfo(app_dn, ldap_url)
       if unique_name['schema'] == 'desktop':
           ENTRY = l.getNismapentry(app_dn, ldap_url)
    try:
        session = ENTRY.get('lightdmparser.session', "mate")
    except:
        session = "mate"
    exec_list = []
    if session == "mate":
        exec_list.append("mate-session")
    elif session == "terminal":
        exec_list.append("xterm")
    elif session == "kiosk":
        exec_list.append("maxwm")
    else:
        pass

    with open('/etc/X11/Xsession.d/99x11-common_start', 'w') as xsession_f:
        from string import Template
        boilerplate="""
# This file is sourced by Xsession(5), not executed.
# TCOS modified: s.passow@openthinclient.org

# tcos-nfs-mount persistent/home on NFS

tcos-mount-nfs-home

# bring in tcos display settings variables
# the file .tcos_displayrc is written by /usr/local/bin/tcos-xrandr
# /usr/local/bin/tcos-xrandr is triggerd by lightdm as session-setup-script
[ -f /tmp/.tcos_displayrc ] && . /tmp/.tcos_displayrc


# populate desktop icons
tcos-desktop-populate &

# start X
"""
        t = Template("""exec ${program} """)
        final_string = "\n".join([boilerplate, t.substitute(program=exec_list[0])])
        if len(exec_list) > 1:
            for exe in exec_list[1:]:
                "\n".join([final_string, t.substitute(program=exe)])
        xsession_f.write(final_string)

# main
if __name__ == "__main__":
    writeSyslog_ng("/etc/syslog-ng/syslog-ng.conf")
    # start syslog as early as possible
    startSyslog_ng()
    #print "write_timezones()"
    write_timezones()
    #print "writeenv"
    writeEnvironment("/etc/environment")
    #print "write ntp.conf"
    write_ntpd_conf()
    #print "write_keyboard"
    writeKeyboard()
    #print "write hostname"
    write_hostname()
    #print "update_dns"
    update_dns(hostname)
    #print "############# FERTIG #####################"
    change_session_type()
