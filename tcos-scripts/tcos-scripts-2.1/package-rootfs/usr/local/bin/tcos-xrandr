#! /usr/bin/python
# standard modules
import string
import sys
import base64
import commands
import ldapurl
import os
import subprocess
import syslog
import time
from subprocess import call
# TCOS modules
import pytcos.tcos as tcos

log = tcos.Logger()
# 0 debug
# 1 info
# 2 warning
# 3 error

u = tcos.Util()
s = tcos.System()
l = tcos.Ldap()

mac = s.getMac()
ldap_url = s.getLdapUrl()
client_dn = l.getClientDn(mac, ldap_url)
devices_dn = l.getDevicesDn(client_dn, ldap_url)
s = ' '

# check if xrandr runs at all and get all connectors
def getConnectors():
    try:
        connectors = subprocess.check_output('xrandr -q | grep -w connected | cut -f1 -d " "', shell=True).split('\n')
    except :  
        log.log(3, "could not querry your grafic card connectors using xrandr. Better luck, next time.")
	sys.exit(0)
    return connectors

def getCustomConnector(device, screen):
    try:
        connector = l.getNismapentry(device, ldap_url).get(screen+'.cust_connector', '')
    except:
        log.log(2, "reading custom connector: failed")
    else:
        log.log(0, "reading custom connector:"+connector+":OK")
    return connector

def getAssignedDisplay():
    for device in devices_dn:
        deviceType = l.getGroupOfUniqueNamesInfo(device, ldap_url)["schema"]
        if deviceType == "display":
            log.log(0,"assigned display found")
            return device
    log.log(3,'no displayset assigned to this client') 
    sys.exit(0)

def getUserCommand(device):
    return l.getNismapentry(device, ldap_url).get('xrandrcmd', '')
       
def getUnassignedConnectors(connectors, device):
    try: connectors.remove(l.getNismapentry(device, ldap_url).get('firstscreen.connect', 'DVI'))
    except: log.log(2,'no screen assigned')
    try: connectors.remove(l.getNismapentry(device, ldap_url).get('secondscreen.connect', 'NONE'))
    except: log.log(2,'second screen not assigned')

def getOffConnectors(connectors):
    try:
        offString = ''
        connectors = filter(None,connectors)
        for turnOff in connectors:
            offString += s.join(('--output', turnOff, '--off',' '))
        return offString 
    except:
        log.log(3,"retrieving connector failed")
        pass 

def getConnector(device, Display, connectors):
    connectors.append('NONE')
    connectors.append('disabled')
    if Display == 'firstscreen':
        connector = l.getNismapentry(device, ldap_url).get(Display + '.connect', 'DVI')
    elif Display == 'secondscreen':
        connector = l.getNismapentry(device, ldap_url).get(Display + '.connect', 'NONE')
    else:
        log.log(3, "screen selection invalid (only first-/ secondscreen allowed)")
        sys.exit(0)
    if not connector in connectors:
        log.log(3, "Misconfigured Displayset: connector not found in active list")
        try:
            message='\"Wenden Sie sich an Ihren Administrator\n'\
                 +'Geraet Display mit DN:'\
                 +getAssignedDisplay()\
                 +'\nVerwenden Sie die Ausgaenge:\n'\
                 +(' ').join(connectors)\
                 +'\nMomentan verwendete Ausgaenge\n'\
                 +l.getNismapentry(device, ldap_url).get('firstscreen' + '.connect', 'DVI')\
                 +' und '+l.getNismapentry(device, ldap_url).get('secondscreen' + '.connect', 'NONE')\
                 +'\nFallback in den default mode'\
                 +'\"'
            subprocess.Popen('sleep 10; zenity --info --text '+message, shell=True)
        except:
            pass 
        sys.exit(0)
    else:
        log.log(3, "found:"+connector)
        return connector

def getRotation(device, Display):
    return l.getNismapentry(device, ldap_url).get(Display + '.rotation', 'normal')

def getResolution(device, Display):
    return l.getNismapentry(device, ldap_url).get(Display + '.resolution', '1920x1080')

def getNewMode(device, mode, frequency):
    x,y = mode.split("x")
    if frequency == '':
        newmode = subprocess.check_output(s.join(('cvt -r',x,y, '| grep -v \\# ')),shell=True)
    else:
        newmode = subprocess.check_output(s.join(('cvt',x,y,frequency,'| grep -v \\# ')),shell=True)
    return s.join(newmode.split()[2:])

def getChipset(device):
    return l.getNismapentry(device, ldap_url).get('graphic', 'default')

def getResList(connector):
    resregex = ' xrandr | awk \'/([0-9]+x[0-9]+)/ { print $1 }\' | sed -r -n \'/' + connector + '/,/[A-Z]/p\' | sed -e \'1d\' -e \'$d\''
    return filter(None,subprocess.check_output(resregex ,shell=True).split('\n')[::-1])

def getScreenPosition(device,screen):
    return l.getNismapentry(device, ldap_url).get('secondscreen.positioning', ' --right-of')   

def getFrequency(device,screen):
    return l.getNismapentry(device, ldap_url).get('firstscreen.fallbackfrequency', '')

def main():
    # Variable declaration
    device = getAssignedDisplay()
    displayset = {} 
    connectors = getConnectors()
    for screen in ('firstscreen','secondscreen'):
        settings = {
            'connected_to': getConnector(device, screen, connectors),
            'resolution': getResolution(device, screen),
            'rotation' : getRotation(device, screen),
            'frequency' : getFrequency(device,screen),
            'position' : str(s.join((getScreenPosition(device,screen), getConnector(device, 'firstscreen', connectors)))),
            'newmode' : getNewMode(device,getResolution(device,screen),getFrequency(device,screen))
        }
        log.log(3, "checkpoint 0"+screen)
        displayset[screen]=settings
        log.log(3, "checkpoint 1")
    #### Initialize defaults 
    displayset['firstscreen']['position'] = ''
    displayset['secondscreen']['frequency'] = ''
    #### first turn off all unused connectors 
    try:
	subprocess.check_call('xrandr ' + getOffConnectors(getConnectors()),shell=True)
    except:
        log.log(2,"turning off unused connectors failed")
        pass
    else:
        log.log(0, "turned off: "+(getOffConnectors(getConnectors())))

    ### Parse User Command if exists
    if getUserCommand(device):
        try:
            subprocess.check_call(getUserCommand(device),shell=True)
            print getUserCommand(device)
	except:
            log.log(2,"User Command failed! Please check the syntax, falling back to manager configuration")
            pass
        else:
            log.log(0,"adjusted specified settings")
            sys.exit(0)

    ####  screen configuration
    for screen in ('firstscreen', 'secondscreen'):
        cust_connector = getCustomConnector(device,screen) 
        if cust_connector != '':
            log.log(1, "custom connector found:"+str(cust_connector))
            displayset[screen]['connected_to'] = cust_connector
        if l.getNismapentry(device, ldap_url).get(screen+'.connect', 'NONE') != 'NONE' or cust_connector != '':
            if displayset[screen]['frequency'] != '':
                mode = displayset[screen]['resolution']+'_'+displayset[screen]['frequency']
                cmdNewMode = s.join(('xrandr', 
                    '--newmode', mode, 
                    displayset[screen]['newmode']))
                cmdAddMode = s.join(('xrandr',
                    '--addmode', mode, 
                    displayset[screen]['resolution']))
                try:
                    log.log(0,"cmdNewMode:"+cmdNewMode)
                    log.log(0,"cmdAddMode:"+cmdAddMode)
                    subprocess.check_call(cmdNewMode, shell=True)
                    subprocess.check_call(cmdAddMode, shell=True)
                except:
                    log.log(2,"mode allready exists!")
                    pass
                else:
                    displayset[screen]['resolution'] = mode
                
            # special treatment for rs690 (futro clients)
            #if getChipset(device) == 'rs690':
            #    rsresolutions = getResList(displayset[screen]['connected_to'])
            #    for res in rsresolutions:
            #        cmdline = s.join(('xrandr', 
            #            '--output', displayset[screen]['connected_to'], 
            #            '--mode', res,
            #            '--rotate', displayset[screen]['rotation'], 
            #            displayset[screen]['position'] ))
            #        subprocess.check_call(cmdline, shell=True)
            #        log.log(0,cmdline)
            #        if(res==displayset[screen]['resolution']):
            #            sys.exit(0) 
            #else:
            #log.log(1,"position:"+displayset[screen]['position'])
            cmdline = s.join(('xrandr', 
                '--output', str(displayset[screen]['connected_to']), 
                '--mode', str(displayset[screen]['resolution']),
                '--rotate', str(displayset[screen]['rotation']), 
                str(displayset[screen]['position'])))
            if screen == 'firstscreen':
                cmdline = s.join((cmdline, '--primary'))

            try: 
                log.log(0,cmdline)
                subprocess.check_call(cmdline, shell=True)
            except:
                log.log(3,screen+"configuration failed")
                pass
        else: 
            log.log(2,screen+" not assigned")

if __name__ == "__main__": 
    main()
