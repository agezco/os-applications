#!/usr/bin/env python

import pytcos.tcos as tcos
import os
import re

from subprocess import call

l = tcos.Ldap()
s = tcos.System()
d = tcos.Desktop()
u = tcos.Util()

ldap_url = s.getLdapUrl()
client_dn = l.getClientDn(s.getMac(), ldap_url)
location_dn = l.getLocationsDn(client_dn, ldap_url)
user_dn = l.getUserDn('tcos', ldap_url)
apps_dn_list = l.getAppsDn(client_dn, user_dn, ldap_url)

PATH_SCHEMA='/etc/dconf/db/local.d/'
FILE='01_desktop'


def format_ldap_key(ldap_keys):
    '''transform ldap key to a dict with a schema key
    '''

    def ldap_to_dict(entry):
        '''take a tuple and return a dict with at least a key named schema
        '''
        # re -> matches the last part of the ldap_entry (is a tuple)
        p = re.compile(r'[a-zA-Z0-9-]*$')
        m = p.search(entry[0])
        s = m.start()
        # get the index of the match, thus to get the end of the string in
        # front -> s - 1
        schema = entry[0][:s-1]
	# dconf uses / to separate not .
	schema = schema.replace('_', '/')
        key = entry[0][s:]
        value = entry[1]
        return {'schema':schema, key:value}
   
    list_dicts = []

    for items in ldap_keys.items():

        list_dicts.append(ldap_to_dict(items))
    
    return list_dicts


def merge_dicts(d_list, special_key):
    '''merge groups of dictionaries. Use value of special_key to form
       groups.
    '''
    def merge_group(d_list, group):
        '''merge dictionaries that contain (key, value), ignore others.
        '''
        merged_dict = {}
        for d in d_list:
            if group in d.items():
                merged_dict.update(d)
        return merged_dict
    
    groups = [item
              for d in d_list
              for item in d.items() if item[0] == special_key]
    # eliminate duplicate groups
    groups = set(groups)
    # merge the dicts that contain the special_key
    merged = [merge_group(d_list, group) for group in groups]
    # add the remaining dicts to the list
    [merged.append(d) for d in d_list if not special_key in d]

    return merged

def format_key(k_dict):
    '''take a key with schema dict and return a formatted string
    '''

    def buul(value):
	if value:
	  return 'true'
	else:
	  return 'false'
    
    try:
        formatted_key = '[' + k_dict['schema'] + ']' + '\n'
    except KeyError as err:
        print('Schema not found:',err)

    for items in k_dict.items():
        if items[0] != 'schema':
            if isinstance(items[1], bool):
                formatted_key += items[0] + '=' + buul(items[1]) + '\n'
            elif isinstance(items[1], float):
                formatted_key += items[0] + '=' + str(items[1]) + '\n'
            elif isinstance(items[1], str):
                formatted_key += items[0] + '=' + '"' + items[1] + '"' + '\n'
	    elif isinstance(items[1], int):
	        formatted_key += items[0] + '=' + str(items[1]) + '\n'
            else:
                print('Value is of type',type(items[1]),', which is not accepted')
                return ''

    return formatted_key


def write_keys(file_path, config_dicts):

    with open(file_path, 'w') as fobj:
        for d in config_dicts:
            fobj.write(format_key(d))

if __name__ == '__main__':
    '''IMPORTANT: As there is no trivial way to identify a single app_dn, this
       is meant as a means to pick up one desktop configuration that applies
    '''
    for app_dn in apps_dn_list:
       unique_name = l.getGroupOfUniqueNamesInfo(app_dn, ldap_url)
       if unique_name['schema'] == 'desktop':
           ENTRY = l.getNismapentry(app_dn, ldap_url)

    '''IMPORTANT: As the java component does not initialize empty elements we
       do need to provide the default settings as a dict
    '''
    DEFAULT = {'org_mate_desktop_media-handling.automount': True,
               'org_mate_desktop_media-handling.automount-open': False,
               'org_mate_panel_toplevels_top.auto-hide': False,
               'org_mate_screensaver.idle-activation-enabled': False,
               'org_mate_screensaver.dpms-on': True,
	       'org_mate_screensaver.dpms-time': 600,
               'org_mate_marco_global-keybindings.run-command-1': '<Ctrl><Alt>x',
               'org_mate_marco_global-keybindings.switch-windows': '<Alt>Tab',
               'org_mate_marco_global-keybindings.numlock': 'none'}


    try: 
        ENTRY.pop('schema_version')
        # overwrite values from DEFAULT with managersettings
        DEFAULT.update(ENTRY)
    except:
        pass

    # e.G. {'org.mate.screensaver.mode': 'blank', 'org.mate.screensaver.}
    dict_lists = format_ldap_key(DEFAULT)
    md = merge_dicts(dict_lists, special_key='schema')
    try:
	write_keys(os.path.join(PATH_SCHEMA, FILE), md)
    except IOError as err:
        print('Write Error:', err)
	
    # update dconf
    os.system('sudo chmod 000 /usr/bin/caja; sudo dconf update; sleep 1; sudo chmod 755 /usr/bin/caja')

   
    # check, if dpms should be enabled or disabled
    if DEFAULT['org_mate_screensaver.dpms-on']:
       call('xset +dpms', shell=True)
       # set dpms time
       time =  DEFAULT['org_mate_screensaver.dpms-time']
       # man xset
       # [+dpms] [-dpms]
       #     [dpms standby [ suspend [ off]]]      [dpms force {standby|suspend|off|on}]
       call(' '.join(['xset dpms', str(time), str(time), str(time)]), shell=True)
    else:
       call('xset -dpms', shell=True)

    # numlockx does not match here, because the user session ist not set up yet
    # this is done in tcos-desktop-populate

    numlock = DEFAULT['org_mate_marco_global-keybindings.numlock']
    if numlock == "on":
        call('touch /tmp/tcos_numlock_ON', shell=True)
    elif numlock == "off":
        call('touch /tmp/tcos_numlock_OFF', shell=True)
